#include <reg52.h>
#include <CommonFunction\thecar.h>

typedef unsigned char uchar;
tydedef unsigned int  uint;

sbit IR = P3^2;    //外部中断0输入口。 定义红外脉冲数据接口

uchar IRtime;       //监测红外
uchar IRcord[4];    //接收ENC协议里，4字节数据
uchar IRdata[33];   //接收33位数据
bit IRpro_ok, IRok; //IRpro_ok用于红外接收4字节完毕，IRok用于检测脉宽完毕 

//预定义函数
void init(void);
void IRcordpro(void); 

void main()
{
	init();	//执行初始化定时器0和外部中断0
	EN1 = EN2 = 1;//使能左右电机
	while(1)	//大循环
	{
		if(IRok)    //判断脉宽是否检测完毕                    
		{   
			IRcordpro(); //根据脉宽解码出4个字节的数据
			IRok = 0;    //重新等待脉宽检测
			if(IRpro_ok) //判断是否解码完毕  
			{
		        switch(IRcord[2])
		   		{
				     case 0x18:  forward(); 			 //前进
				             break;
				     case 0x52:  backward();  			 //后退	 
				             break;
				     case 0x08:  left_run(); 			 //左转
				             break;
					 case 0x5A:  right_run(); 	         //右转
				             break;
					 case 0x1C:  stop();			 //停止
				             break;
					 default:break;
		   		}
				IRpro_ok = 0;
			}
		}	
	}
}

//初始化定时器0和外部中断0
void init()	  
{
	TMOD = 0x02; //定时器0工作方式2，8位自动重装
	TH0 = 0x00;  //高8位装入0那么定时器溢出一次的时间是256个机器周期
	TL0 = 0x00;
	EA = 1;      //总中断
	ET0 = 1;     //定时器0中断
	TR0 = 1;     //启动定时器0

	IT0 = 1;     //设置外部中断0为跳沿触发方式，来一个下降沿触发一次
	EX0 = 1;     //启动外部中断0
}

//定义定时器0,中断检测。
void time0() interrupt 1  
{
	IRtime++; 			   //检测脉宽，1次为278us
}

//定义外部中断0
void int0() interrupt 0	  		
{
	static uchar i;	 			//声明静态变量（在跳出函数后在回来执行的时候不会丢失数值）i用于把33次高电平的持续时间存入IRdata
	static bit startflag;		        //开始储存脉宽标志位
	if(startflag)	 			//开始接收脉宽检测
	{
		if( (IRtime < 53) && (IRtime >= 32) ) 
			i = 0;				 //如果是引导码那么执行i=0把他存到IRdata的第一个位
		IRdata[i] = IRtime;  		         //以T0的溢出次数来计算脉宽，把这个时间存到数组里面到后面判断
		IRtime = 0;				 //计数清零，下一个下降沿的时候在存入脉宽
		i++; 					 //计数脉宽存入的次数
		if(i == 33) 				 //如果存入34次 数组的下标是从0开始i等于33表示执行了34次
		{
		 	IRok = 1;		         //那么表示脉宽检测完毕
			i = 0; 				 //把脉宽计数清零准备下次存入
		}
	}
	else		  
	{
		IRtime = 0; 	                 //引导码开始进入把脉宽计数清零开始计数
		startflag = 1;			 //开始处理标志位置1
	}
}

//解码函数
void IRcordpro()   				 //提取它的33次脉宽进行数据解码
{
	uchar i, j, k, cord, value;	/*i用于处理4个字节，j用于处理一个字节中每一位，k用于33次脉宽中的哪一位
	cord用于取出脉宽的时间判断是否符合1的脉宽时间*/
	k = 1; 						//从第一位脉宽开始取，丢弃引导码脉宽
	for(i = 0; i < 4; i++)
	{
		for(j = 0; j < 8; j++)
		{
			cord = IRdata[k];	 //把脉宽存入cord
			if(cord > 5)	 	 //如果脉宽大于我11.0592的t0溢出率为约278us*5=1390那么判断为1
			value = value | 0x80;	
			if(j < 7)
			{
				value = value >> 1;  //value位左移依次接收8位数据。
			}
			k++;			     //每执行一次脉宽位加1
		}
		IRcord[i] = value;	             //每处理完一个字节把它放入IRcord数组中。
		value = 0; 			     //清零value方便下次在存入数据
	}
	IRpro_ok = 1;				     //接收完4个字节后IRpro ok置1表示红外解码完成	
}
